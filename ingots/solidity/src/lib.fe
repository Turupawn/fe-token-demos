pub use evm
pub use map
pub use evm::{ MemBuffer, StorageBuffer }
pub use std::mydefault::MyDefault
pub use std::codec::{ Cursor, Encode, Decode }
pub use map::{ Map, Hasher, Entry }
pub use map::map_storage::{MapStorage }
pub use std::operators::{Add, Sub, AddAssign, SubAssign}
pub use ingot::keccak256::{Keccak256}
pub use std::is_zero

pub type Mapping<T, U> = map::Map<T, U, SolidityMapStorage<T, U, Keccak256>>

pub trait MappingExt<T, U> {
    fn new(self, slot: u256)
}

impl<T, U> MappingExt<T, U> for Mapping<T, U>
where
    T: Encode,
    U: Encode + Decode + IsZero + MyDefault,
{
    fn new(mut self, slot: u256) {
        //self.hasher.slot = slot
    }
}